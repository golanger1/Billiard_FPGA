// bitmap file 
// (c) Technion IIT, Department of Electrical Engineering 2021 
// generated bythe automatic Python tool 
 
`define NUM_BALLS 6 

 module hit_ballBitMap (

					input	logic	clk, 
					input	logic	resetN, 
					input logic	[`NUM_BALLS:0] [10:0] offsetX,// offset from top left  position 
					input logic	[`NUM_BALLS:0][10:0] offsetY, 
					input	logic	[`NUM_BALLS:0] InsideRectangle, //input that the pixel is within a bracket
					//input	logic	hitBalls_color [2:1][7:0], 
					input logic [`NUM_BALLS:0] balls_in_game,
 
					output	logic	hitBall_DR, //output that the pixel should be dispalyed 
					output	logic	[`NUM_BALLS:0] hitBall_DR_VEC, //output that the pixel should be dispalyed 
					output	logic	[7:0] RGBout  //rgb value from the bitmap 
					//EDIT 140922
					//output	logic	[`NUM_BALLS:0][3:0] HitEdgeCode //one bit per edge 
 ) ; 

 
 
logic [7:0] hitBallColor;

// generating the bitmap 
// ***EXTRA - Unite with for loop and build param array of colors for balls to put to VGA***

localparam logic [7:0] TRANSPARENT_ENCODING = 8'hff ;// RGB value in the bitmap representing a transparent pixel
localparam logic [7:0] GENERIC_COLOR_ENCODING = 8'h58 ;// RGB value in the bitmap representing a transparent pixel

logic [0:10][7:0] balls_colors = {8'hfe,8'h03,8'h1C,8'hC0,8'h6B,8'h60,8'hF4,8'h00,8'h00,8'h00,8'h00};
										//    0     1     2     3     4     5     6     7     8     9     10
										//	 White  Blue Green  Red .....

logic[0:31][0:31][7:0] object_colors = {
	{8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff},
	{8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'h00,8'h00,8'h00,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h00,8'h00,8'h00,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff},
	{8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'h00,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h00,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff},
	{8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'h00,8'h00,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h00,8'h00,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff},
	{8'hff,8'hff,8'hff,8'hff,8'hff,8'h00,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h00,8'hff,8'hff,8'hff,8'hff,8'hff},
	{8'hff,8'hff,8'hff,8'hff,8'h00,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h00,8'hff,8'hff,8'hff,8'hff},
	{8'hff,8'hff,8'hff,8'h00,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h00,8'hff,8'hff,8'hff},
	{8'hff,8'hff,8'hff,8'h00,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h00,8'hff,8'hff,8'hff},
	{8'hff,8'hff,8'h00,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h00,8'hff,8'hff},
	{8'hff,8'h00,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h00,8'hff},
	{8'hff,8'h00,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h00,8'hff},
	{8'hff,8'h00,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h00,8'hff},
	{8'h00,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h00},
	{8'h00,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h00},
	{8'h00,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h00},
	{8'h00,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h00},
	{8'h00,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h00},
	{8'h00,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h00},
	{8'h00,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h00},
	{8'h00,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h00},
	{8'hff,8'h00,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h00,8'hff},
	{8'hff,8'h00,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h00,8'hff},
	{8'hff,8'h00,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h00,8'hff},
	{8'hff,8'hff,8'h00,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h00,8'hff,8'hff},
	{8'hff,8'hff,8'hff,8'h00,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h00,8'hff,8'hff,8'hff},
	{8'hff,8'hff,8'hff,8'h00,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h00,8'hff,8'hff,8'hff},
	{8'hff,8'hff,8'hff,8'hff,8'h00,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h00,8'hff,8'hff,8'hff,8'hff},
	{8'hff,8'hff,8'hff,8'hff,8'hff,8'h00,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h00,8'hff,8'hff,8'hff,8'hff,8'hff},
	{8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'h00,8'h00,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h00,8'h00,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff},
	{8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'h00,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h00,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff},
	{8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'h00,8'h00,8'h00,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h58,8'h00,8'h00,8'h00,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff},
	{8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff}};
 
 

			
logic not_Transparent; //omer 31.08

			
// pipeline (ff) to get the pixel color from the array 	 
//////////--------------------------------------------------------------------------------------------------------------= 
always_ff@(posedge clk or negedge resetN) 
begin 
	if(!resetN) begin 
		RGBout <=	8'h00; 
		//HitEdgeCode <= {(`NUM_BALLS+1){4'h0}}; 
		not_Transparent = 1'b0; //omer 31.08
		hitBall_DR_VEC = {(`NUM_BALLS+1){1'b0}};
	end 
	else 
		begin 
		
			RGBout <= TRANSPARENT_ENCODING ; // default  
			//HitEdgeCode <= {(`NUM_BALLS+1){4'h0}}; 
			not_Transparent = 1'b0; //omer 31.08
			hitBall_DR_VEC = {(`NUM_BALLS+1){1'b0}};

			for (int i = 0; i < `NUM_BALLS+1 ; i++)
				begin
					if (InsideRectangle[i] && balls_in_game[i]) // ball id
						begin
							if(object_colors[offsetY[i]][offsetX[i]] == GENERIC_COLOR_ENCODING || object_colors[offsetY[i]][offsetX[i]] == 8'h00)
								begin
									not_Transparent = 1'b1;
									hitBall_DR_VEC[i] = 1'b1;
									//HitEdgeCode[i] <= hit_colors[offsetY[i] >> 3][offsetX[i] >> 3 ]; // get hitting edge from the colors table
									if(object_colors[offsetY[i]][offsetX[i]] == GENERIC_COLOR_ENCODING)
										begin
											RGBout <= balls_colors[i];
										end
									else
										begin
											RGBout <= 8'h00;
										end						
								end
						end			
				end
				
			if (not_Transparent == 1'b0)
				begin
					RGBout <= TRANSPARENT_ENCODING; // originally: object_colors[offsetY][offsetX];
				end
		 	 
		end 
end 
 
//////////--------------------------------------------------------------------------------------------------------------= 
// decide if to draw the pixel or not 
assign hitBall_DR = (RGBout != TRANSPARENT_ENCODING ) ? 1'b1 : 1'b0 ; // get optional transparent command from the bitmpap   
//assign hitBall_DR_VEC = InsideRectangle & balls_in_game & ;
endmodule 
