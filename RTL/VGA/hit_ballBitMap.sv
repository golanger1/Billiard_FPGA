// bitmap file 
// (c) Technion IIT, Department of Electrical Engineering 2021 
// generated bythe automatic Python tool 
 
//parameter int 2 = 2;
 
 //generic hitball important!! - need to change vector values: OffsetX[N:1][10:0]
 module hit_ballBitMap (

					input	logic	clk, 
					input	logic	resetN, 
					input logic	[2:1] [10:0] offsetX,// offset from top left  position 
					input logic	[2:1][10:0] offsetY, 
					input	logic	InsideRectangle[2:1], //input that the pixel is within a bracket
					//input	logic	hitBalls_color [2:1][7:0],        
 
					output	logic	hitBall_DR, //output that the pixel should be dispalyed 
					output	logic	[7:0] RGBout,  //rgb value from the bitmap 
					output	logic	[2:1][3:0] HitEdgeCode //one bit per edge 
 ) ; 
 
 
 
logic [7:0] hitBallColor;

// generating the bitmap 
 

localparam logic [7:0] TRANSPARENT_ENCODING = 8'hff ;// RGB value in the bitmap representing a transparent pixel
localparam logic [7:0] GENERIC_COLOR_ENCODING = 8'hC0 ;// RGB value in the bitmap representing a transparent pixel
  
logic[0:31][0:31][7:0] object_colors = {
	{8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff},
	{8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff},
	{8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'h00,8'h00,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'h00,8'h00,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff},
	{8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'h00,8'h00,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'h00,8'h00,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff},
	{8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'h00,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'h00,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff},
	{8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'h00,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'h00,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff},
	{8'hff,8'hff,8'hff,8'hff,8'hff,8'h00,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'h00,8'hff,8'hff,8'hff,8'hff,8'hff},
	{8'hff,8'hff,8'hff,8'hff,8'h00,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'h00,8'hff,8'hff,8'hff,8'hff},
	{8'hff,8'hff,8'hff,8'h00,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'h00,8'hff,8'hff,8'hff},
	{8'hff,8'hff,8'hff,8'h00,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'h00,8'hff,8'hff,8'hff},
	{8'hff,8'hff,8'h00,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'h00,8'hff,8'hff},
	{8'hff,8'hff,8'h00,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'h00,8'hff,8'hff},
	{8'hff,8'h00,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'h00,8'hff,8'hff},
	{8'hff,8'h00,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'h00,8'hff},
	{8'hff,8'h00,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'h00,8'hff},
	{8'hff,8'h00,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'h00,8'hff},
	{8'hff,8'h00,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'h00,8'hff},
	{8'hff,8'h00,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'h00,8'hff},
	{8'hff,8'h00,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'h00,8'hff},
	{8'hff,8'h00,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'h00,8'hff,8'hff},
	{8'hff,8'hff,8'h00,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'h00,8'hff,8'hff},
	{8'hff,8'hff,8'h00,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'h00,8'hff,8'hff},
	{8'hff,8'hff,8'hff,8'h00,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'h00,8'hff,8'hff,8'hff},
	{8'hff,8'hff,8'hff,8'h00,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'h00,8'hff,8'hff,8'hff},
	{8'hff,8'hff,8'hff,8'hff,8'h00,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'h00,8'hff,8'hff,8'hff,8'hff},
	{8'hff,8'hff,8'hff,8'hff,8'hff,8'h00,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'h00,8'hff,8'hff,8'hff,8'hff,8'hff},
	{8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'h00,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'h00,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff},
	{8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'h00,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'h00,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff},
	{8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'h00,8'h00,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'h00,8'h00,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff},
	{8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'h00,8'h00,8'h00,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'hC0,8'h00,8'h00,8'h00,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff},
	{8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff},
	{8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff,8'hff}};

 
 
//////////--------------------------------------------------------------------------------------------------------------= 
//hit bit map has one bit per edge:  hit_colors[3:0] =   {Left, Top, Right, Bottom}	 
//there is one bit per edge, in the corner two bits are set  
 logic [0:3] [0:3] [3:0] hit_colors = 
		   {16'hC446,     
			16'h8C62,    
			16'h8932, 
			16'h9113}; 
			
 logic notZero = 1'b0;

			
 // pipeline (ff) to get the pixel color from the array 	 
//////////--------------------------------------------------------------------------------------------------------------= 
always_ff@(posedge clk or negedge resetN) 
begin 
	if(!resetN) begin 
		RGBout <=	8'h00; 
		HitEdgeCode <= 4'h0; 
	end 
	else 
		begin 
			RGBout <= TRANSPARENT_ENCODING ; // default  
			HitEdgeCode <= 4'h0;
			


			


			if (InsideRectangle[2]) //   2 - GreenBall
				begin
					if(object_colors[offsetY[2]][offsetX[2]] == GENERIC_COLOR_ENCODING || object_colors[offsetY[2]][offsetX[2]] == 8'h00)
						begin
							HitEdgeCode[2] <= hit_colors[offsetY[2] >> 3][offsetX[2] >> 3 ]; // get hitting edge from the colors table
							if(object_colors[offsetY[2]][offsetX[2]] == GENERIC_COLOR_ENCODING)
								begin
									notZero = 1'b1;
									RGBout <= 8'h1C;
								end
							else
								begin
									RGBout <= 8'h00;
								end						
						end
				end
				
			if (InsideRectangle[1]) //   1 - BlueBall
				begin
					if(object_colors[offsetY[1]][offsetX[1]] == GENERIC_COLOR_ENCODING || object_colors[offsetY[1]][offsetX[1]] == 8'h00)
						begin
							HitEdgeCode[1] <= hit_colors[offsetY[1] >> 3][offsetX[1] >> 3 ]; // get hitting edge from the colors table
							if(object_colors[offsetY[1]][offsetX[1]] == GENERIC_COLOR_ENCODING)
								begin
									notZero = 1'b1;
									RGBout <= 8'h03;
								end
							else
								begin
									RGBout <= 8'h00;
								end
						end
				end
				
			if (notZero == 1'b0)
				begin
					RGBout <= TRANSPARENT_ENCODING; // originally: object_colors[offsetY][offsetX];
				end
		 
			 
		end 
end 
 
//////////--------------------------------------------------------------------------------------------------------------= 
// decide if to draw the pixel or not 
assign hitBall_DR = (RGBout != TRANSPARENT_ENCODING ) ? 1'b1 : 1'b0 ; // get optional transparent command from the bitmpap   
 
endmodule 
